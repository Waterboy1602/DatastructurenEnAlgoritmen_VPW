import java.util.*;

public class Main {
	public static void main(String[] args) {
		Garfield garfield = new Garfield();
		garfield.inlezen();
	}
}

class Garfield {
	private int minuten;
	private List<int[]> vissen;
	private int[] garfield;
	private Set<Integer> aantal = new HashSet<Integer>();
		public void inlezen() {
			String lijn;
			Scanner sc = new Scanner(System.in);
			lijn = sc.nextLine();
			int aantalTestgevallen = Integer.parseInt(lijn);
			vissen = new ArrayList<int[]>();
			for(int i=0; i<aantalTestgevallen; i++) {
				aantal.clear();
				//inlezen gegevens
				lijn = sc.nextLine();
				String[] temp = lijn.split(" ");
				int breedte = Integer.parseInt(temp[0]);
				int hoogte = Integer.parseInt(temp[1]);
				minuten = Integer.parseInt(temp[2]);
				for(int j=0; j<hoogte; j++) {
					lijn = sc.nextLine();
					for(int w=0; w<breedte; w++) {
						if(lijn.charAt(w)=='G') {
							garfield = new int[2];				
							garfield[0]=j;
							garfield[1]=w;
						}
						if(lijn.charAt(w)=='E') {
							int[] tijd = new int[2];
							tijd[0]=j;
							tijd[1]=w;
							vissen.add(tijd);
						}
					}
				}
			int tijd = i+1;
			berekenen();
			System.out.println(tijd + " " + Collections.max(aantal));
		}
		sc.close();
	}
	
	private void berekenen() {
		int overgeblevenTijd = minuten;
		int aantalVissen=0;
		for(int j=0; j<vissen.size(); j++) {
			if(kanOpTijdZijn(overgeblevenTijd, garfield, vissen.get(j))) {
				int tijd = overgeblevenTijd - verlopenTijd(afstand(garfield, vissen.get(j)));
				List<int[]> opgegetenVissen =  new ArrayList<int[]>();
				opgegetenVissen.add(vissen.get(j));
				backtrack(aantalVissen+1, vissen.get(j), opgegetenVissen, tijd);
			}

		}
		return;
	}
	
	private boolean kanOpTijdZijn(int overgeblevenTijd, int[] nu, int[] naar) {
		int afstand=afstand(nu, naar);
		int vanThuis=afstand(nu, garfield);
		if(overgeblevenTijd - (afstand+1) - vanThuis >= 0) return true;
		return false;
	}
	
	private int verlopenTijd(int afstand) {
		return (2 * afstand) + 1;
	}
	
	private int inHuisEten(int overgeblevenTijd, int[] verplaatsGarfield, int [] nu) {
		overgeblevenTijd -= afstand(verplaatsGarfield, nu) + 1;
		return overgeblevenTijd;
	}
	private int afstand(int[] plaats1, int[] plaats2) {
		return Math.abs(plaats1[0] - plaats2[0]) + Math.abs(plaats1[1] - plaats2[1]);
	}
	
	private List<int[]> vindDichtste(List<int[]> opgegetenVissen, int[] verplaatsGarfield) {
		List<int[]> nogTeEten = vissen;
		nogTeEten.removeAll(opgegetenVissen);
		List<int[]> tijdelijkeDichtste = new ArrayList<int[]>();
		if(nogTeEten.size()<=0) return tijdelijkeDichtste;
		tijdelijkeDichtste.add(nogTeEten.get(0));
		for(int i=1; i<nogTeEten.size(); i++) {
			if(afstand(verplaatsGarfield, tijdelijkeDichtste.get(0)) > afstand(verplaatsGarfield, nogTeEten.get(i))) {
				tijdelijkeDichtste.clear();
				tijdelijkeDichtste.add(nogTeEten.get(i));
			}
			if(afstand(verplaatsGarfield, tijdelijkeDichtste.get(0)) == afstand(verplaatsGarfield, nogTeEten.get(i))) {
				tijdelijkeDichtste.add(nogTeEten.get(i));
			}
		}
		return tijdelijkeDichtste;
	}
	
	private void backtrack(int aantalVissen, int[] verplaatsGarfield, List<int[]> opgegetenVissen, int overgeblevenTijd) {
		if(overgeblevenTijd-afstand(garfield, verplaatsGarfield)>0) {
			List<int[]> dichtsteVis = vindDichtste(opgegetenVissen, verplaatsGarfield);
			if(!dichtsteVis.isEmpty()) {
				for(int i=0; i<dichtsteVis.size(); i++) {
					if(kanOpTijdZijn(overgeblevenTijd, verplaatsGarfield, dichtsteVis.get(i))) {
						overgeblevenTijd = inHuisEten(overgeblevenTijd, verplaatsGarfield, dichtsteVis.get(i));
						aantalVissen++;
						opgegetenVissen.add(dichtsteVis.get(i));
						backtrack(aantalVissen, dichtsteVis.get(i), opgegetenVissen, overgeblevenTijd);
					}
				}
			}
		} else {
			aantal.add(aantalVissen);
			aantalVissen=1;
		}
		return;
	}
	
}
